============================================
vis/zeyuh3.out
17:17:55_Monday_15_April_2019
============================================
COMP90045 project - Test of parser and pretty-printer
User:  zeyuh3

--- Makefile found ---
--- Running Makefile ---
ghc -o Goat GoatParser.hs
[1 of 3] Compiling GoatAST          ( GoatAST.hs, GoatAST.o )
[2 of 3] Compiling GoatPrinter      ( GoatPrinter.hs, GoatPrinter.o )
[3 of 3] Compiling Main             ( GoatParser.hs, GoatParser.o )
Linking Goat ...

--- Succeeded to create a file called Goat ---

**********************************************   Parsing assoc.gt:
Okay
**********************************************   Parsing bell.gt:
Okay
**********************************************   Parsing gcd.gt:
Okay
**********************************************   Parsing hail.gt:
Okay
**********************************************   Parsing matrixmul.gt:
Okay
**********************************************   Parsing power.gt:
Okay
**********************************************   Parsing q1.gt:
Okay
**********************************************   Parsing q2.gt:
Okay
**********************************************   Parsing q3.gt:
Okay
**********************************************   Parsing q4.gt:
Okay
**********************************************   Parsing sort.gt:
Okay
**********************************************   Parsing stddev.gt:
Okay
**********************************************   Parsing missing_rel.bad.gt:
Okay
**********************************************   Parsing mode1.bad.gt:
Okay
**********************************************   Parsing mode2.bad.gt:
Okay
**********************************************   Parsing mode3.bad.gt:
Okay
**********************************************   Parsing mode4.bad.gt:
Okay
**********************************************   Parsing multivar1.bad.gt:
Okay
18 of 18 tests passed.

--- End of testing for zeyuh3 ---

============================================
src/GoatAST.hs
17:17:52_Monday_15_April_2019
============================================
{-
File: GoatAST.hs
Author: Wumpus-Killers (Wentao Liu, Raymond Sun, Zeyu Huang, Yiqun Wang)
Origin: Thu 4 Apr 2019
Purpose: Data structure of an AST for Goat
    - This program defines the data types for a Goat AST.
    - It also specifies the instantiation of the show method for "atomic" types,
      which can be utilized by GoatPrinter.hs.
-}

module GoatAST where
import Numeric
import Data.List

-----------------------------------
-- Specification of an AST for Goat
-----------------------------------

-- Identifier
type Ident = String

-- Array size of shape [n] or [m, n]
-- This differs from ArrayIndex as it is only used in declaration.
data ArraySize
    = OneDimen Int
    | Matrix Int Int 
    deriving (Eq)

-- Array index of shape [expr] or [expr1, expr2]
data ArrayIndex
    = OneDimenIndex Expr
    | MatrixIndex Expr Expr
    deriving (Eq)

data BaseType
    = BoolType | IntType | FloatType
    deriving (Eq)

data Var
    = VId Ident
    | VArray Ident ArrayIndex
    deriving (Eq)

-- Binary operators
data Binop
    = Op_or | Op_and | Op_add | Op_mul | Op_sub | Op_div | Op_eq |     
    Op_ne | Op_gt | Op_gte | Op_lt | Op_lte
    deriving (Enum, Eq)

-- Unary operators
data UnaryOp
    = Op_uneg | Op_umin
    deriving (Enum, Eq)

data Expr
    = BoolConst Bool
    | IntConst Int
    | FloatConst Float
    | StrConst String
    | Id Ident
    | Array Ident ArrayIndex
    | BinExpr Binop Expr Expr
    | UnaryExpr UnaryOp Expr
    deriving (Eq)

data Decl
    = BaseDecl Ident BaseType
    | ArrayDecl Ident ArraySize BaseType
    deriving (Show, Eq)

data Stmt
    = Assign Var Expr
    | Read Var
    | Write Expr
    | Call Ident [Expr]
    | If Expr [Stmt]
    | IfElse Expr [Stmt] [Stmt]
    | While Expr [Stmt]
    deriving (Eq)

data Proc
    = Proc Ident [Param] [Decl] [Stmt]
    deriving (Show, Eq)

data PassType 
    = Ref | Val
    deriving (Eq)
    
data Param
    = Param PassType BaseType Ident
    deriving (Show, Eq)

data GoatProgram
    = Program [Proc]
    deriving (Show, Eq)


----------------------------------------------------------------------
--  Instantiate Show for formating smaller components of an Goat AST.
--  These Show instances can be utilized in GoatPrinter where smaller 
--  components are organized into statements, declarations, etc.
----------------------------------------------------------------------

instance Show Expr where
    show (BoolConst b)
        | b == True = "true"    
        | b == False = "false"
    show (IntConst i) = show i
    -- showFFloat to print floats not as exponents 
    show (FloatConst f) = showFFloat Nothing f ""
    -- String literals are wrapped with quotation marks
    show (StrConst s) = "\"" ++ s ++ "\""
    show (Id id) = id
    show (Array id aindex) = id ++ show aindex
    show (BinExpr b e1 e2) = 
        intercalate " " [showWrap e1, show b, showWrap e2]
    show (UnaryExpr u e) = show u ++ showWrap e

-- Wrap operands of an expression with parentheses if it is a BinExpr
showWrap :: Expr -> String
showWrap expr = case expr of
    BinExpr b e1 e2 -> "(" ++ show expr ++ ")"
    _ -> show expr
    
-- Format (Assign|Read|Write|Call) statements which does not recursively
-- contain other statements.
instance Show Stmt where
    show (Assign lval e) = show lval ++ " := " ++ show e ++ ";\n"
    show (Read lval) = "read " ++ show lval ++ ";\n"
    show (Write e) = "write " ++ show e  ++ ";\n"
    show (Call id exprs) = 
        "call " ++ id ++ 
        "(" ++ intercalate ", " (map show exprs) ++ ");\n"
    -- Other cases should be handled by GoatPrinter.formatStmtI
    -- Thus the code below is only for debug purpose.
    show _ = "<Stub for a (If|IfElse|While) block>"

instance Show ArraySize where
    show (OneDimen len) = "[" ++ show len ++ "]"
    show (Matrix h w) = "[" ++ show h ++ ", " ++ show w ++ "]"

instance Show ArrayIndex where
    show (OneDimenIndex e) = "[" ++ show e ++ "]"
    show (MatrixIndex e1 e2) = "[" ++ show e1 ++ ", " ++ show e2 ++ "]"

instance Show Var where
    show (VId id) = id
    show (VArray id aindex) = id ++ show aindex

instance Show Binop where
    show Op_or  = "||"
    show Op_and = "&&"
    show Op_add = "+"
    show Op_sub = "-"
    show Op_div = "/"
    show Op_mul = "*"
    show Op_eq  = "="
    show Op_ne  = "!="
    show Op_gt  = ">"
    show Op_gte = ">="
    show Op_lt  = "<"
    show Op_lte = "<="

instance Show UnaryOp where
    show Op_uneg = "!"
    show Op_umin = "-"
                        
instance Show BaseType where
    show BoolType = "bool"
    show IntType = "int"
    show FloatType = "float"

instance Show PassType where
    show Ref = "ref"
    show Val = "val"
============================================
src/GoatParser.hs
17:17:52_Monday_15_April_2019
============================================
{-
File: GoatParser.hs
Author: Wumpus-Killers (Wentao Liu, Raymond Sun, Zeyu Huang, Yiqun Wang)
        - Based on skeleton code provided by Harald SÃ¸ndergaard
Origin: Thu 4 Apr 2019
Purpose: Converts a Goat program (text) to an AST as specified in GoatAST.hs
    - Pretty prints the result into a "standard" Goat program layout 
    - For more insight into Goat program syntax, check GoatAST.hs
-}

module Main where

import GoatAST
import GoatPrinter
import Data.Char
import Data.List
import Text.Parsec
import Text.Parsec.Language (emptyDef)
import qualified Text.Parsec.Token as Q
import Text.Parsec.Expr
import System.Environment
import System.Exit

type Parser a
    = Parsec String Int a


-----------------------------------------------------------------
--    Main
-----------------------------------------------------------------

-- Represents a task that is desired of the GoatParser program
data Task = Compile | PrettyPrint deriving(Eq, Show)

-- Read the command line inputs and do the desired action
-- Currently we can only parse and then pretty print the result
main :: IO ()
main = do 
    progname <- getProgName
    args <- getArgs
    task <- checkArgs progname args
    if task == Compile then do
        putStrLn "Sorry, cannot generate code yet"
        exitWith ExitSuccess
    else do 
        input <- readFile (last args)
        let output = runParser pMain 0 "" input
        case output of
            Right ast -> putStr $ GoatPrinter.formatProgram ast
            Left  err -> do { putStr "Parse error at "
                            ; print err
                            ; exitWith (ExitFailure 2)
                            }        

-- Check the command line args to determine what the program should do
checkArgs :: String -> [String] -> IO Task
checkArgs _ ["-p",filename] = 
    return PrettyPrint 
checkArgs _ [filename] =
    return Compile
checkArgs progname args = do 
    putStrLn ("\nUsage: " ++ progname ++ "[-p] filename\n\n")
    exitWith (ExitFailure 1)



-----------------------------------------------------------------
--    Parsec scanner functions
-----------------------------------------------------------------
lexer :: Q.TokenParser Int
lexer = 
    Q.makeTokenParser
        (emptyDef
        { Q.commentLine     = "#"
        , Q.nestedComments  = True
        , Q.identStart      = letter
        , Q.opStart         = oneOf "+-*/:|&<=>!"
        , Q.opLetter        = oneOf "+-*/:|&<=>!"
        , Q.reservedNames   = myReserved
        , Q.reservedOpNames = myOpnames
        })

whiteSpace      = Q.whiteSpace lexer
lexeme          = Q.lexeme lexer
natural         = Q.natural lexer
float           = Q.float lexer
identifier      = Q.identifier lexer
colon           = Q.colon lexer
semi            = Q.semi lexer
comma           = Q.comma lexer
parens          = Q.parens lexer
squares         = Q.squares lexer
reserved        = Q.reserved lexer
reservedOp      = Q.reservedOp lexer
naturalOrFloat  = Q.naturalOrFloat lexer

myReserved, myOpnames :: [String]

myReserved = 
    ["begin", "bool", "call", "do", "else", "end", "false", "fi", "float", "if", 
    "int", "od", "proc", "read", "ref", "then", "true", "val", "while", "write"]
      
myOpnames = 
    ["+", "-", "*", "/", ":=", "||", "&&", "!", "=", "!=", "<", "<=", ">", ">="]


-----------------------------------------------------------------
--    Parsing the goat program
-----------------------------------------------------------------

-- Parses the entire goat program which consists of one or more procedures 
pMain :: Parser GoatProgram
pMain = do
    whiteSpace
    p <- many1 pProc
    eof
    return (Program p)

pProc :: Parser Proc
pProc = do
    reserved "proc"
    ident <- identifier 
    params <- parens pProcHeader 
    (decls,stmts) <- pProcBody
    return (Proc ident params decls stmts)


-----------------------------------------------------------------
--   Parsing the header of a goat procedure
-----------------------------------------------------------------

pProcHeader :: Parser [Param]
pProcHeader = 
    sepBy pProcParam comma

pProcParam :: Parser Param
pProcParam = do
    passType <- pPassType
    basetype <- pBaseType
    ident <- identifier
    return (Param passType basetype ident)

pPassType :: Parser PassType
pPassType =
    do { reserved "ref"; return Ref }
    <|>
    do { reserved "val"; return Val }


-----------------------------------------------------------------
--  Parsing the body of a goat procedure
-----------------------------------------------------------------

-- The body is just everything other than the procedure id and header
-- Contains variable declarations and statments.

pProcBody :: Parser ([Decl],[Stmt])
pProcBody = do
    decls <- many pDecl
    reserved "begin"
    stmts <- many1 pStmt
    reserved "end"
    return (decls,stmts)

pDecl :: Parser Decl
pDecl = do
    basetype <- pBaseType
    ident <- identifier
    maybeSize <- optionMaybe $ squares pArraySize
    whiteSpace
    semi
    case maybeSize of 
        Nothing   -> return (BaseDecl ident basetype)
        Just size -> return (ArrayDecl ident size basetype)

pArraySize :: Parser ArraySize
pArraySize = do 
    x <- pInt
    maybeY <- optionMaybe $ comma *> pInt
    case maybeY of 
        Nothing -> return (OneDimen x)
        Just y  -> return (Matrix x y)

pInt :: Parser Int
pInt = do 
    n <- natural
    return (fromInteger n::Int)
  
pBaseType :: Parser BaseType
pBaseType = 
    do { reserved "bool"; return BoolType }
    <|>
    do { reserved "int"; return IntType }
    <|>
    do { reserved "float"; return FloatType}
      
-----------------------------------------------------------------
--  Parsing statements
-----------------------------------------------------------------

pStmt, pRead, pWrite, pAsg, pIfElse, pWhile, pCall :: Parser Stmt

pStmt = choice [pRead, pWrite, pAsg, pIfElse, pWhile, pCall]

pRead = do 
    reserved "read"
    var <- pVar
    semi
    return (Read var)

pWrite = do 
    reserved "write"
    exp <- (pString <|> pExp)
    semi
    return (Write exp)

pCall = do
    reserved "call"
    ident <- identifier
    exprlist <- parens (sepBy pExp comma)
    semi
    return (Call ident exprlist)

pAsg = do
    var <- pVar
    reservedOp ":="
    rvalue <- pExp
    semi
    return (Assign var rvalue)

-- Handles both (if..then) and (if..then..else) stmts
pIfElse = do
    reserved "if"
    exp <- pExp
    reserved "then"
    stmts <- many1 pStmt
    maybeElseStmts <- optionMaybe elseStmts
    reserved "fi"
    case maybeElseStmts of 
        Nothing        -> return (If exp stmts)
        Just elseStmts -> return (IfElse exp stmts elseStmts)
    where elseStmts = reserved "else" *> (many1 pStmt)

pWhile = do
    reserved "while"
    exp <- pExp
    reserved "do"
    stmts <- many1 pStmt
    reserved "od"
    return (While exp stmts)
  

-----------------------------------------------------------------
--  Parsing expressions
-----------------------------------------------------------------

pExp, pNum, pIdent, pString, pBool :: Parser Expr

--buildExpressionParser automatically builds a parser for expressions (duh)
-- based on the table of operations (table) and any provided terms (pFac) 
pExp = 
    buildExpressionParser table pFac 
    <?> 
    "expression"

pFac = choice [parens pExp, pNum, pIdent, pString, pBool]

table = [ [ prefix "-" (UnaryExpr Op_umin) ]
        , [ binary "*" (BinExpr Op_mul), binary "/" (BinExpr Op_div) ] 
        , [ binary "+" (BinExpr Op_add), binary "-" (BinExpr Op_sub) ] 
        , [ relation "=" (BinExpr Op_eq), relation "!=" (BinExpr Op_ne)
          , relation "<" (BinExpr Op_lt), relation "<=" (BinExpr Op_lte)
          , relation ">" (BinExpr Op_gt), relation ">=" (BinExpr Op_gte) ] 
        , [ prefix "!" (UnaryExpr Op_uneg) ]
        , [ binary "&&" (BinExpr Op_add) ]
        , [ binary "||" (BinExpr Op_or) ]
        ]

prefix name fun = Prefix (do { reservedOp name; return fun })

binary name op = Infix (do { reservedOp name; return op }) AssocLeft

relation name rel = Infix (do { reservedOp name; return rel }) AssocNone

pString = do
    char '"'
    str <- many (satisfy (\x -> (x /= '"') 
                             && (x /= '\t') 
                             && (x /= '\n')))
    char '"'
    whiteSpace
    return (StrConst str)
    <?>
    "string"

pBool = 
    do { reserved "true"; return (BoolConst True) }
    <|>
    do { reserved "false"; return (BoolConst False) }

pNum = do
    iOrF <- naturalOrFloat;
    case iOrF of 
        Left i  -> return (IntConst (fromInteger i :: Int))
        Right f -> return (FloatConst (realToFrac f :: Float))
    <?>
    "number"

pIdent = do
    ident <- identifier 
    maybeIndex <- optionMaybe $ squares pArrayIndex
    case maybeIndex of
        Nothing    -> return (Id ident)  
        Just index -> return (Array ident index)

-----------------------------------------------------------------
--  Parsing variables
-----------------------------------------------------------------   
pVar :: Parser Var
pVar = do 
    ident <- identifier
    maybeIndex <- optionMaybe $ squares pArrayIndex
    case maybeIndex of 
        Nothing    -> return (VId ident)
        Just index -> return (VArray ident index)
    <?>
    "variable"

pArrayIndex :: Parser ArrayIndex
pArrayIndex = do 
    x <- pExp
    maybeY <- optionMaybe $ comma *> pExp
    case maybeY of 
        Nothing -> return (OneDimenIndex x)
        Just y  -> return (MatrixIndex x y)
 


============================================
src/Makefile
17:17:52_Monday_15_April_2019
============================================
Goat: GoatParser.hs GoatAST.hs GoatPrinter.hs
	ghc -o Goat GoatParser.hs

clean:
	rm -f Goat*.o Goat*.hi Goat

============================================
src/README.md
17:17:52_Monday_15_April_2019
============================================
# Goat Parser

Parser for the Goat language. Programming project for COMP90045. 


## Authors

Zeyu, Yiqun, Wentao, Raymond

Skeleton code by Harald

## Issues
============================================
src/GoatPrinter.hs
17:17:52_Monday_15_April_2019
============================================

{-
File: GoatPrinter.hs
Author: Wumpus-Killers (Wentao Liu, Raymond Sun, Zeyu Huang, Yiqun Wang)
Origin: Thu 4 Apr 2019
Purpose: Pretty printer for GoatAST data
    - This program deals with printing GoatAST objects across multiple lines:
      GoatProgram, Proc, [Decl], [Stmt], etc.
    - For formating elements within a single line (Expr, Decl, etc.), the
      logic is implemented in GoatAST.hs by instantiating Show for these types
    - The consideration behind this design is that bigger AST objects needs
      to be indented properly based on its "context", which is not accessible
      in the GoatAST module.
-}

module GoatPrinter where

import GoatAST
import Data.List

pretty :: GoatProgram -> String
pretty ast = formatProgram ast

--AST specifies: GoatProgram = Program [Proc]
formatProgram :: GoatProgram -> String
formatProgram (Program procs) = intercalate "\n" (map formatProc procs)
--note that formatProc *puts a new line* onto the end of each proc.


--AST spec: data Proc = Proc Ident [Param] [Decl] [Stmt]
formatProc :: Proc -> String
formatProc (Proc id param decl stmt) 
    = "proc " ++ id ++ " (" ++ formatParam param ++ ")" 
        ++ "\n" ++ formatDecl decl ++ "begin\n" ++ formatStmts stmt ++ "end\n" 

--AST spec: Param ParamType BaseType Ident
formatParam :: [Param] -> String
--no params = no text
formatParam [] = ""
--the last param is printed without comma afterwards
formatParam ((Param pType bType id):[]) 
    = (intercalate " " [show pType, show bType, id])
--non last param is paramtype, basetype and id separated by space, 
--then comma into next param
formatParam ((Param pType bType id): params)
    = (intercalate " " [show pType, show bType, id]) ++ ", " 
        ++ formatParam params

-- A set of functions for formatting indentation
data Indent = BySpace Int 

indentStep = BySpace 4

formatIndent :: Indent -> String
formatIndent (BySpace n) = replicate n ' '

furtherIndent :: Indent -> Indent
furtherIndent = addIndent indentStep

addIndent :: Indent -> Indent -> Indent
addIndent (BySpace x) (BySpace y) = BySpace (x + y)

-- A list of variable declarations is indented by one indentStep
formatDecl :: [Decl] -> String
formatDecl [] = ""
formatDecl ((BaseDecl id bType):decls) 
    = (formatIndent indentStep) ++ (show bType) 
        ++ " " ++ (id) ++ ";\n" ++ formatDecl decls
formatDecl ((ArrayDecl id aSize bType):decls) 
    = (formatIndent indentStep) ++ (show bType) 
        ++ " " ++ (id) ++ (show aSize) ++ ";\n" ++ formatDecl decls

formatStmts :: [Stmt] -> String
formatStmts s = formatStmtsI indentStep s

-- This method formats statements with specified indentation.
formatStmtsI :: Indent -> [Stmt] -> String
formatStmtsI i stmts = concat $ map (formatStmtI i) stmts

-- A statement is formatted recursively where each recursive call
-- furthers the indentation by one indentStep.
formatStmtI :: Indent -> Stmt -> String
formatStmtI i stmt = case stmt of 
    If expr stmts -> 
        (formatIndent i) ++ "if " ++ (show expr) ++ " then\n" ++
        formatStmtsI (furtherIndent i) stmts ++
        (formatIndent i) ++ "fi\n"
    IfElse expr stmtIf stmtElse -> 
        (formatIndent i) ++ "if " ++ (show expr) ++ " then\n" ++
        formatStmtsI (furtherIndent i) stmtIf ++
        (formatIndent i) ++ "else\n" ++
        formatStmtsI (furtherIndent i) stmtElse ++
        (formatIndent i) ++ "fi\n"
    While expr stmts -> 
        (formatIndent i) ++ "while " ++ (show expr) ++ " do\n" ++
        formatStmtsI (furtherIndent i) stmts ++
        (formatIndent i) ++ "od\n"
    atomicStmt ->
        -- For (Assign|Read|Write|Call) statements,
        -- show is implemented in GoatAST.hs
        (formatIndent i) ++ show atomicStmt






