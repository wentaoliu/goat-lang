###################################
# Simple BFS+DFS graph explorer   #
# by Cody Anderson                #
###################################

proc main ()
begin
    call explore();    
end


#Explore a graph using BFS or a DFS
proc explore()
    #Node count
    int node_count;

    #Used for input
    int from;
    int to;

    #Turn off output
    bool echo;
    
    #For input, determins if DFS or BFS
    bool isDFS;

    #Iter variable
    int i;

    #Cur ndoe
    int cur;

    #For returning values from choose
    int ret;

    #Track visited edges
    bool visited[100];

    # Graph itself, using a adjacency matrix
    # not the best DS for this job but it is easy
    bool edges[100, 100];

    #Queue data structure (possibly isnt large enough?)
    int queue[1000];
    int qend;
    int start;
begin

    # Handle all the input and construct the graph
    call get_info(isDFS, node_count, echo);
    if echo then
        write "\nAdd some edges (-1 to stop)\n";
    fi
    call get_edge(from, to, echo);
    while from != -1 && to != -1 do
        edges[from, to] := true;
        call get_edge(from, to, echo);
    od
    

    # Push all the edges of the first node to the queue
    # this code is repeated later unfortunatly, but due to
    # goats limitations not a lot of choices
    visited[0] := true;
    while i < node_count do
        if edges[0, i] && !visited[i] then
            queue[qend] := i;
            qend := qend + 1;
        fi
        i := i + 1;
    od

    # Print the first node and set up the next one
    write 0;
    call choose(isDFS, start, qend, ret);
    cur := queue[ret];

    while start != qend do
        write " -> ";

        # Set this node as visited and remove it from the queue
        visited[cur] := true;
        write cur;
        call advance(isDFS, start, qend);

        # Repeated code, push edges to queue
        i := 0;
        while i < node_count do
            if !visited[i] && edges[cur, i] then
                queue[qend] := i;
                qend := qend + 1;
            fi
            i := i + 1;
        od

        # Find the next node to vist, skipping over any alredy visited ones
        call choose(isDFS, start, qend, ret);
        cur := queue[ret];
        while visited[cur] && start != qend do
            call advance(isDFS, start, qend);
            call choose(isDFS, start, qend, ret);
            cur := queue[ret];
        od
    od
    write "\n";
end

# Get all the basic info (size and DFS or BFS) and print some
# info for the users benefit
proc get_info(ref bool isDFS, ref int node_count, ref bool echo)
begin
    write "Print? (true or false)\n";

    read echo;

    if echo then
        write "DFS (true) or BFS (false)?:\n";
    fi
    
    read isDFS;

    if echo then
        write "How many Nodes (< 101):\n";
        write ":> ";
    fi

    read node_count;

    if echo then
        write "Your nodes are labeled 0 to ";
        write node_count-1;
        write " (0 is the start node)\n";
    fi
end

# Get an edge from the user
proc get_edge(ref int from, ref int to, val bool echo)
begin
    if echo then
        write "From: ";
    fi
    read from;
    if from != -1 then
        if echo then
            write "To: ";
        fi
        read to;
    fi
end


#These 3 procs do the BFS or DFS specific behaviour

#Print a DFS or BFS label just before the output
proc print_type(val bool isDFS)
begin
    if isDFS then
        write "\nDFS: ";
    else
        write "\nBFS: ";
    fi
end

# Move on to the next edge to explore, goes forward or backward
# depending on the type of search
proc advance(val bool isDFS, ref int start, ref int qend)
begin
    if isDFS then
        qend := qend - 1;
    else
        start := start + 1;
    fi
end

# Choose to look at the start or the end of the queue 
# (depending on what type of search) for the next value
proc choose(val bool isDFS, ref int start, ref int qend, ref int ret)
begin
    if isDFS then
        ret := qend-1;
    else
        ret := start;
    fi
end
