============================================
vis/zeyuh3.out
16:34:43_Thursday_11_April_2019
============================================
COMP90045 project - Test of parser and pretty-printer
User:  zeyuh3

--- Makefile found ---
--- Running Makefile ---
ghc -o Goat GoatParser.hs
[1 of 3] Compiling GoatAST          ( GoatAST.hs, GoatAST.o )
[2 of 3] Compiling GoatPrinter      ( GoatPrinter.hs, GoatPrinter.o )
[3 of 3] Compiling Main             ( GoatParser.hs, GoatParser.o )
Linking Goat ...

--- Succeeded to create a file called Goat ---

**********************************************   Parsing assoc.gt:
Okay
**********************************************   Parsing bell.gt:
Okay
**********************************************   Parsing gcd.gt:
Okay
**********************************************   Parsing hail.gt:
Okay
**********************************************   Parsing matrixmul.gt:
Okay
**********************************************   Parsing power.gt:
Okay
**********************************************   Parsing q1.gt:
Okay
**********************************************   Parsing q2.gt:
Okay
**********************************************   Parsing q3.gt:
Okay
**********************************************   Parsing q4.gt:
Okay
**********************************************   Parsing sort.gt:
Okay
**********************************************   Parsing stddev.gt:
Okay
**********************************************   Parsing missing_rel.bad.gt:
Okay
**********************************************   Parsing mode1.bad.gt:
Okay
**********************************************   Parsing mode2.bad.gt:
Okay
**********************************************   Parsing mode3.bad.gt:
Okay
**********************************************   Parsing mode4.bad.gt:
Okay
**********************************************   Parsing multivar1.bad.gt:
Okay
18 of 18 tests passed.

--- End of testing for zeyuh3 ---

============================================
src/GoatParser.hs
16:34:40_Thursday_11_April_2019
============================================
module Main where

import GoatAST
import GoatPrinter
import Data.Char
import Data.List
import Text.Parsec
import Text.Parsec.Language (emptyDef)
import qualified Text.Parsec.Token as Q
import Text.Parsec.Expr
import System.Environment
import System.Exit

type Parser a
    = Parsec String Int a

lexer :: Q.TokenParser Int
lexer
    = Q.makeTokenParser
      (emptyDef
      { Q.commentLine     = "#"
      , Q.nestedComments  = True
      , Q.identStart      = letter
      , Q.opStart         = oneOf "+-*/:|&<=>!"
      , Q.opLetter        = oneOf "+-*/:|&<=>!"
      , Q.reservedNames   = myReserved
      , Q.reservedOpNames = myOpnames
      })

whiteSpace = Q.whiteSpace lexer
lexeme     = Q.lexeme lexer
natural    = Q.natural lexer
float      = Q.float lexer
identifier = Q.identifier lexer
colon      = Q.colon lexer
semi       = Q.semi lexer
comma      = Q.comma lexer
parens     = Q.parens lexer
squares    = Q.squares lexer
reserved   = Q.reserved lexer
reservedOp = Q.reservedOp lexer
naturalOrFloat = Q.naturalOrFloat lexer

myReserved, myOpnames :: [String]

myReserved
  = ["begin", "bool", "call", "do", "else", "end", "false", "fi", "float", "if", 
      "int", "od", "proc", "read", "ref", "then", "true", "val", "while", "write"]
      
myOpnames 
  = ["+", "-", "*", "/", ":=", "||", "&&", "!", "=", "!=", "<", "<=", ">", ">="]

-----------------------------------------------------------------
--  pProg is the topmost parsing function. It looks for a program
--  header "proc main()", followed by the program body.
-----------------------------------------------------------------

pProg :: Parser Proc
pProg
  = do
      reserved "proc"
      -- reserved "main"
      ident <- identifier 
      -- parens (return ())
      params <- parens pProgHeader 
      (decls,stmts) <- pProgBody
      return (Proc ident params decls stmts)


pProgHeader :: Parser [Param]
pProgHeader
  = sepBy pProgParam comma

pProgParam :: Parser Param
pProgParam
  = do
      paramtype <- pParamType
      basetype <- pBaseType
      ident <- identifier
      return (Param paramtype basetype ident)

pParamType :: Parser ParamType
pParamType
  = do { reserved "ref"; return Ref }
    <|>
    do { reserved "val"; return Val }
-----------------------------------------------------------------
--  pProgBody looks for a sequence of declarations followed by a
--  sequence of statements.
-----------------------------------------------------------------

pProgBody :: Parser ([Decl],[Stmt])
pProgBody
  = do
      decls <- many pDecl
      reserved "begin"
      stmts <- many1 pStmt
      reserved "end"
      return (decls,stmts)

pDecl :: Parser Decl
pDecl
  = do
    basetype <- pBaseType
    ident <- identifier
    size <- optionMaybe $ squares pArraySize
    whiteSpace
    semi
    case size of 
      Nothing -> return (BaseDecl ident basetype)
      Just s -> return (ArrayDecl ident s basetype)

pArraySize :: Parser ArraySize
pArraySize
  = do 
    x <- pInt
    optional comma
    y <- optionMaybe pInt
    case y of 
      Nothing -> return (OneDimen x)
      Just i -> return (Matrix x i)
    
pInt :: Parser Int
pInt 
  = do 
    n <- natural
    return (fromInteger n::Int)
  

pBaseType :: Parser BaseType
pBaseType
  = do { reserved "bool"; return BoolType }
    <|>
    do { reserved "int"; return IntType }
    <|>
    do { reserved "float"; return FloatType}
      
-----------------------------------------------------------------
--  pStmt is the main parser for statements. It wants to recognise
--  read and write statements, and assignments.
-----------------------------------------------------------------

pStmt, pRead, pWrite, pAsg, pIfElse, pWhile, pCall :: Parser Stmt

pStmt 
  = choice [pRead, pWrite, pAsg, pIfElse, pWhile, pCall]

pRead
  = do 
      reserved "read"
      lvalue <- pLvalue
      semi
      return (Read lvalue)

pWrite
  = do 
      reserved "write"
      exp <- (pString <|> pExp)
      semi
      return (Write exp)

pCall
  = do
    reserved "call"
    ident <- identifier
    exprlist <- parens (sepBy1 pExp comma)
    semi
    return (Call ident exprlist)

pAsg
  = do
      lvalue <- pLvalue
      reservedOp ":="
      rvalue <- pExp
      semi
      return (Assign lvalue rvalue)

pIfElse
  = do
    reserved "if"
    exp <- pExp
    reserved "then"
    stmts1 <- many1 pStmt
    optional (reserved "else")
    stmts2 <- optionMaybe (many1 pStmt)
    reserved "fi"
    case stmts2 of 
      Nothing -> return (If exp stmts1)
      Just stmts -> return (IfElse exp stmts1 stmts)

pWhile
  = do
    reserved "while"
    exp <- pExp
    reserved "do"
    stmts <- many1 pStmt
    reserved "od"
    return (While exp stmts)
  

-----------------------------------------------------------------
--  pExp is the main parser for expressions. It takes into account
--  the operator precedences and the fact that the binary operators
--  are left-associative.
-----------------------------------------------------------------

pExp, pNum, pIdent, pString, pBool :: Parser Expr

pExp = buildExpressionParser table pFac 
        <?> "expression"

pFac = choice [parens pExp, pNum, pIdent, pString, pBool]

table = [ [ prefix "-" (UnaryExpr Op_umin) ]
        , [ binary "*" (BinExpr Op_mul), binary "/" (BinExpr Op_div) ] 
        , [ binary "+" (BinExpr Op_add), binary "-" (BinExpr Op_sub) ] 
        , [ relation "=" (BinExpr Op_eq), relation "!=" (BinExpr Op_ne)
          , relation "<" (BinExpr Op_lt), relation "<=" (BinExpr Op_lte)
          , relation ">" (BinExpr Op_gt), relation ">=" (BinExpr Op_gte) ] 
        , [ prefix "!" (UnaryExpr Op_uneg) ]
        , [ binary "&&" (BinExpr Op_add) ]
        , [ binary "||" (BinExpr Op_or) ]
        ]

prefix name fun = Prefix (do { reservedOp name; return fun })

binary name op = Infix (do { reservedOp name; return op }) AssocLeft

relation name rel = Infix (do { reservedOp name; return rel }) AssocNone

pString 
  = do
      char '"'
      str <- many (satisfy (/= '"'))
      char '"'
      return (StrConst str)
    <?>
    "string"

pBool
  = do { reserved "true"; return (BoolConst True) }
    <|>
    do { reserved "false"; return (BoolConst False) }

pNum
  = do
        n <- naturalOrFloat;
        case n of 
          Left i -> return (IntConst (fromInteger i :: Int))
          Right f -> return (FloatConst (realToFrac f :: Float))
    <?>
    "number"

pIdent 
  = do
    ident <- identifier 
    aindex <- optionMaybe (squares pArrayIndex)
    case aindex of
      Nothing -> return (Id ident)  
      Just i -> return (Array ident i)

pLvalue :: Parser Lvalue
pLvalue
  = do 
    ident <- identifier
    aindex <- optionMaybe $ squares pArrayIndex
    case aindex of 
      Nothing -> return (LId ident)
      Just i -> return (LArray ident i)
    <?>
    "lvalue"

pArrayIndex :: Parser ArrayIndex
pArrayIndex
  = do 
    x <- pExp
    optional comma
    y <- optionMaybe pExp
    case y of 
      Nothing -> return (OneDimenIndex x)
      Just i -> return (MatrixIndex x i)
 
-----------------------------------------------------------------
-- main
-----------------------------------------------------------------

pMain :: Parser GoatProgram
pMain
  = do
      whiteSpace
      p <- many1 pProg
      eof
      return (Program p)

main :: IO ()
main
  = do { progname <- getProgName
        ; args <- getArgs
        ; checkArgs progname args
        ; input <- readFile (last args)
        ; let output = runParser pMain 0 "" input
        ; case output of
            Right ast -> putStr $ pretty ast
            Left  err -> do { putStr "Parse error at "
                            ; print err
                            ; exitWith (ExitFailure 2)
                            }
        }

 

checkArgs :: String -> [String] -> IO ()
--need to confirm filename is a .gt file
checkArgs _ ["-p",filename]
    = return ()
checkArgs progname [filename]
    = do { putStrLn (progname ++ "\n" ++ (concat [filename]) ++ "\nSorry, code cannot be generated yet\n")
        ; exitWith (ExitFailure 1)
        }
checkArgs progname args
    = do { putStrLn ((Data.List.intercalate " " args) ++ "\nUsage: " ++ progname ++ " filename\n\n")
        ; exitWith (ExitFailure 1)
        }


        
============================================
src/GoatPrinter.hs
16:34:41_Thursday_11_April_2019
============================================
module GoatPrinter where

import GoatAST
import Data.List

-------------------------------------------------------------------------
--  Pretty printer for GoatAST data
--  - This file only contains logic for organising lines with indentation
--  - For formating elements within a line (expr, stmt, etc.), the logic
--    is implemented in GoatAST.hs by instantiating Show for these types
-------------------------------------------------------------------------


pretty :: GoatProgram -> String
pretty ast = formatProgram ast

--data GoatProgram = Program [Proc]
formatProgram :: GoatProgram -> String
formatProgram (Program procs) = intercalate "\n" (map formatProc procs)
--two consecutive procedures should be separated by a single blank line. 
--note that formatProc *puts a new line* onto the end of each proc.


--data Proc = Proc Ident [Param] [Decl] [Stmt]
formatProc :: Proc -> String
formatProc (Proc id param decl stmt) 
    = "proc " ++ id ++ " (" ++ formatParam param ++ ")" 
        ++ "\n" ++ formatDecl decl ++ "begin\n" ++ formatStmts stmt ++ "end\n" 

--Param ParamType BaseType Ident
formatParam :: [Param] -> String
--no params = no text
formatParam [] = ""
--the last param is printed without comma afterwards
formatParam ((Param pType bType id):[]) 
    = (intercalate " " [show pType, show bType, id])
--non last param is paramtype, basetype and id separated by space, then comma into next param
formatParam ((Param pType bType id): params)
    = (intercalate " " [show pType, show bType, id]) ++ ", " ++ formatParam params

--needs to be indented
-- BaseDecl Ident BaseType | ArrayDecl Ident ArraySize BaseType
formatDecl :: [Decl] -> String
formatDecl [] = ""
formatDecl ((BaseDecl id bType):decls) 
    = (formatIndent indentStep) ++ (show bType) 
        ++ " " ++ (id) ++ ";\n" ++ formatDecl decls
formatDecl ((ArrayDecl id aSize bType):decls) 
    = (formatIndent indentStep) ++ (show bType) 
        ++ " " ++ (id) ++ (show aSize) ++ ";\n" ++ formatDecl decls

--needs to be indented. if block and while block need extra indentation
formatStmts :: [Stmt] -> String
formatStmts s = formatStmtsI indentStep s


data Indent = BySpace Int 
            -- | ByTab Int

indentStep = BySpace 4

formatIndent :: Indent -> String
formatIndent (BySpace n) = replicate n ' '

furtherIndent :: Indent -> Indent
furtherIndent = addIndent indentStep

addIndent :: Indent -> Indent -> Indent
addIndent (BySpace x) (BySpace y) = BySpace (x + y)

formatStmtsI :: Indent -> [Stmt] -> String
formatStmtsI i stmts = concat $ map (formatStmtI i) stmts

formatStmtI :: Indent -> Stmt -> String
formatStmtI i stmt = case stmt of 
    Assign lval expr -> (formatIndent i) ++
        (show lval) ++ " := " ++ (show expr) ++ ";\n"
    Read lval -> (formatIndent i) ++
        "read " ++ (show lval) ++ ";\n"
    Write expr -> (formatIndent i) ++
        "write " ++ (show expr) ++ ";\n"
    Call id exprs -> (formatIndent i) ++
        "call " ++ id ++  
        "(" ++ (intercalate ", " $ map show exprs) ++ ");\n"
        -- bug fix: add `;` at the end of call statement
    If expr stmts -> 
        (formatIndent i) ++ "if " ++ (show expr) ++ " then\n" ++
        formatStmtsI (furtherIndent i) stmts ++
        (formatIndent i) ++ "fi\n"
    IfElse expr stmtIf stmtElse -> 
        (formatIndent i) ++ "if " ++ (show expr) ++ " then\n" ++
        formatStmtsI (furtherIndent i) stmtIf ++
        (formatIndent i) ++ "else\n" ++
        formatStmtsI (furtherIndent i) stmtElse ++
        (formatIndent i) ++ "fi\n"
    While expr stmts -> 
        (formatIndent i) ++ "while " ++ (show expr) ++ " do\n" ++
        formatStmtsI (furtherIndent i) stmts ++
        (formatIndent i) ++ "od\n"







============================================
src/GoatAST.hs
16:34:41_Thursday_11_April_2019
============================================
module GoatAST where
import Numeric
import Data.List
-----------------------------------
-- Specification of an AST for Goat
-----------------------------------

type Ident = String

data ArraySize
    = OneDimen Int
    | Matrix Int Int 
    deriving (Eq)

data ArrayIndex
    = OneDimenIndex Expr
    | MatrixIndex Expr Expr
    deriving (Eq)

data BaseType
    = BoolType | IntType | FloatType
    deriving (Eq)

data Lvalue
    = LId Ident
    | LArray Ident ArrayIndex
    deriving (Eq)

data Binop
    = Op_or | Op_and | Op_add | Op_mul | Op_sub | Op_div | Op_eq |     
    Op_ne | Op_gt | Op_gte | Op_lt | Op_lte
    -- deriving (Show, Enum, Eq)
    deriving (Enum, Eq)

data UnaryOp
    = Op_uneg | Op_umin
    -- deriving (Show, Enum, Eq)
    deriving (Enum, Eq)

data Expr
    = BoolConst Bool
    | IntConst Int
    | FloatConst Float
    | StrConst String
    | Id Ident
    | Array Ident ArrayIndex
    | BinExpr Binop Expr Expr
    | UnaryExpr UnaryOp Expr
    deriving (Eq)

data Decl
    = BaseDecl Ident BaseType
    | ArrayDecl Ident ArraySize BaseType
    deriving (Show, Eq)

data Stmt
    = Assign Lvalue Expr
    -- | Assign Lvalue ArrayIndex Expr
    | Read Lvalue
    -- | Read Lvalue ArrayIndex
    | Write Expr
    | Call Ident [Expr]
    | If Expr [Stmt]
    | IfElse Expr [Stmt] [Stmt]
    | While Expr [Stmt]
    deriving (Eq)

data Proc
    = Proc Ident [Param] [Decl] [Stmt]
    deriving (Show, Eq)

data ParamType 
    = Ref | Val
    deriving (Eq)
    
data Param
    = Param ParamType BaseType Ident
    deriving (Show, Eq)

data GoatProgram
    = Program [Proc]
    deriving (Show, Eq)


-----------------------------------------------------------------
--  Instantiate show for formating smaller components of a stmt
-----------------------------------------------------------------

instance Show Expr where
    show (BoolConst b)
        | b == True = "true"    
        | b == False = "false"
    show (IntConst i) = show i
    --showFFloat to print floats not as exponents 
    show (FloatConst f) = showFFloat Nothing f ""
    show (StrConst s) = "\"" ++ s ++ "\""
    show (Id id) = id
    show (Array id aindex) = id ++ show aindex
    show (BinExpr b e1 e2) = 
        intercalate " " [showWrap e1, show b, showWrap e2]
    show (UnaryExpr u e) = show u ++ show e

-- Wrap operands of an expression with parentheses
showWrap :: Expr -> String
showWrap expr = case expr of
    BinExpr b e1 e2 -> "(" ++ show expr ++ ")"
    _ -> show expr
    

instance Show Stmt where
    show (Assign lval e) = show lval ++ " := " ++ show e
    show (Read lval) = "read " ++ show lval
    show (Write e) = "write " ++ show e
    show (Call id exprs) = 
        "call " ++ id ++ 
        "(" ++ intercalate ", " (map show exprs) ++ ")"
    -- other cases should be handled by GoatPrinter.formatStmtI
    show _ = "<Stub for a (If|IfElse|While) block>"

instance Show ArraySize where
    show (OneDimen len) = "[" ++ show len ++ "]"
    show (Matrix h w) = "[" ++ show h ++ ", " ++ show w ++ "]"
    -- bug fix: space after comma

instance Show ArrayIndex where
    show (OneDimenIndex e) = "[" ++ show e ++ "]"
    show (MatrixIndex e1 e2) = "[" ++ show e1 ++ ", " ++ show e2 ++ "]"
    -- bug fix: space after comma

instance Show Lvalue where
    show (LId id) = id
    show (LArray id aindex) = id ++ show aindex

instance Show Binop where
    show Op_or  = "||"
    show Op_and = "&&"
    show Op_add = "+"
    show Op_sub = "-"
    show Op_div = "/"
    show Op_mul = "*"
    show Op_eq  = "="
    show Op_ne  = "!="
    show Op_gt  = ">"
    show Op_gte = ">="
    show Op_lt  = "<"
    show Op_lte = "<="

instance Show UnaryOp where
    show Op_uneg = "!"
    show Op_umin = "-"
                        

instance Show BaseType where
    show BoolType = "bool"
    show IntType = "int"
    show FloatType = "float"

instance Show ParamType where
    show Ref = "ref"
    show Val = "val"
============================================
src/Makefile
16:34:41_Thursday_11_April_2019
============================================
Goat: GoatParser.hs GoatAST.hs GoatPrinter.hs
	ghc -o Goat GoatParser.hs

clean:
	rm -f Goat*.o Goat*.hi

